// SPDX-License-Identifier: GPL-2.0

/dts-v1/;

#include "tegra30.dtsi"
#include "tegra30-cpu-opp.dtsi"
#include "tegra30-cpu-opp-microvolt.dtsi"
#include <dt-bindings/input/input.h>

/ {
	model = "Microsoft Surface RT";
	compatible = "microsoft,surface-rt", "nvidia,tegra30";

	aliases {
		mmc0 = &sdmmc4; /* eMMC */
		mmc1 = &sdmmc1; /* uSD slot */
		mmc2 = &sdmmc3; /* WiFi */
		rtc0 = &pmic;
		rtc1 = &tegra_rtc;
		serial0 = &uarta; /* console */
		serial1 = &uartc; /* Bluetooth */
	};

	chosen {
		stdout-path = "serial0:115200n8";
	};

	/* clock from PMIC */
	clk32k_in: clock-32 {
		compatible = "fixed-clock";
		clock-frequency = <32768>;
		#clock-cells = <0>;
	};

	i2c-cover {
		compatible = "i2c-hotplug-gpio";

		#address-cells = <1>;
		#size-cells = <0>;

		interrupts-extended = <&gpio TEGRA_GPIO(S,0) IRQ_TYPE_EDGE_BOTH>;
		detect-gpios = <&gpio TEGRA_GPIO(S,0) GPIO_ACTIVE_HIGH>;

		i2c-parent = <&i2c1>;

		cover@0 {
			compatible = "hid-over-i2c";
			reg = <0x00>;
			hid-descr-addr = <0x0041>;
			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(O, 5) IRQ_TYPE_LEVEL_LOW>;
		};
	};

	mrvl_wifi_pwrseq: wifi-pwrseq {
		compatible = "mmc-pwrseq-simple";

		clocks = <&tegra_pmc TEGRA_PMC_CLK_BLINK>;
		clock-names = "ext_clock";

		post-power-on-delay-ms = <300>;
		power-off-delay-us = <300>;
	};

	lvds-encoder {
		compatible = "idt,v103", "lvds-encoder";

		powerdown-gpios = <&gpio TEGRA_GPIO(B, 2) GPIO_ACTIVE_LOW>;

		ports {
			#address-cells = <1>;
			#size-cells = <0>;

			port@0 {
				reg = <0>;

				lvds_encoder_input: endpoint {
					remote-endpoint = <&lcd_output>;
				};
			};

			port@1 {
				reg = <1>;

				lvds_encoder_output: endpoint {
					remote-endpoint = <&panel_input>;
				};
			};
		};
	};

	panel: display-panel {
		compatible = "panel-lvds";

		power-supply = <&vdd_pnl1_reg>;
		backlight = <&backlight>;

		width-mm = <235>;
		height-mm = <132>;
		rotation = <0>;

		data-mapping = "jeida-24";

		panel-timing {
			clock-frequency = <71980000>;

			hactive = <1366>;
			vactive = <768>;

			hfront-porch = <56>;
			hsync-len = <14>;
			hback-porch = <106>;

			vfront-porch = <3>;
			vsync-len = <1>;
			vback-porch = <6>;
		};

		port {
			panel_input: endpoint {
				remote-endpoint = <&lvds_encoder_output>;
			};
		};
	};

	backlight: backlight {
		compatible = "pwm-backlight";

		enable-gpios = <&gpio TEGRA_GPIO(DD, 0) GPIO_ACTIVE_HIGH>;
		power-supply = <&vdd_5v0_sys>;
		pwms = <&pwm 0 50000>;

		brightness-levels = <1 255>;
		num-interpolated-steps = <254>;
		default-brightness-level = <128>;
	};

	gpio-keys {
		compatible = "gpio-keys";

		label = "GPIO Buttons";

		power {
			label = "Power Button";
			gpios = <&gpio TEGRA_GPIO(V, 0) GPIO_ACTIVE_HIGH>;
			linux,code = <KEY_POWER>;
			debounce-interval = <10>;
			wakeup-source;
		};

		windows-button {
			label = "Windows Button";
			gpios = <&gpio TEGRA_GPIO(S, 5) GPIO_ACTIVE_HIGH>;
			linux,code = <KEY_LEFTMETA>;
			debounce-interval = <10>;
			wakeup-source;
		};

		volume-down {
			label = "Volume Down";
			gpios = <&gpio TEGRA_GPIO(S, 6) GPIO_ACTIVE_LOW>;
			linux,code = <KEY_VOLUMEDOWN>;
			debounce-interval = <10>;
		};

		volume-up {
			label = "Volume Up";
			gpios = <&gpio TEGRA_GPIO(S, 7) GPIO_ACTIVE_LOW>;
			linux,code = <KEY_VOLUMEUP>;
			debounce-interval = <10>;
		};
	};

	gpio-hall-sensor {
		compatible = "gpio-keys";

		label = "GPIO Hall Effect Sensor";

		hall-sensor {
			label = "Hall Effect Sensor";
			gpios = <&gpio TEGRA_GPIO(L, 1) GPIO_ACTIVE_HIGH>;
			linux,input-type = <EV_SW>;
			linux,code = <SW_LID>;
			linux,can-disable;
			wakeup-source;
		};
	};

	vdd_5v0_sys: regulator-5v0 {
		compatible = "regulator-fixed";
		regulator-name = "vdd_5v0";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-always-on;
	};

	vdd_1v8_sys: regulator-1v8 {
		compatible = "regulator-fixed";
		regulator-name = "vdd_1v8_vs";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <1800000>;
		regulator-always-on;
		vin-supply = <&vdd_5v0_sys>;
	};

	usb1_vbus_reg: regulator-usb1 {
		compatible = "regulator-fixed";
		regulator-name = "usb1_vbus";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		enable-active-high;
		gpio = <&gpio TEGRA_GPIO(DD, 6) GPIO_ACTIVE_HIGH>;
		gpio-open-drain;
		vin-supply = <&vdd_5v0_sys>;
	};

	vqmmc_wifi_reg: vddio-wifi {
		compatible = "regulator-fixed";
		regulator-name = "vqmmc_wifi";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-boot-on;
		regulator-always-on;
		vin-supply = <&vdd_5v0_sys>;
	};

	vdd_pnl1_reg: regulator-panel {
		compatible = "regulator-fixed";
		regulator-name = "vdd_pnl1";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-boot-on;
		regulator-always-on;
		gpio = <&gpio TEGRA_GPIO(DD, 2) GPIO_ACTIVE_HIGH>;
		enable-active-high;
		vin-supply = <&vdd_5v0_sys>;
	};

	vdd_cam1_ldo_reg: regulator-cam1 {
		compatible = "regulator-fixed";
		regulator-name = "vdd_cam1_ldo";
		regulator-min-microvolt = <2800000>;
		regulator-max-microvolt = <2800000>;
		enable-active-high;
		gpio = <&gpio TEGRA_GPIO(R, 6) GPIO_ACTIVE_HIGH>;
		vin-supply = <&vdd_5v0_sys>;
	};

	vdd_cam2_ldo_reg: regulator-cam2 {
		compatible = "regulator-fixed";
		regulator-name = "vdd_cam2_ldo";
		regulator-min-microvolt = <2800000>;
		regulator-max-microvolt = <2800000>;
		enable-active-high;
		gpio = <&gpio TEGRA_GPIO(R, 7) GPIO_ACTIVE_HIGH>;
		vin-supply = <&vdd_5v0_sys>;
	};

	regulator-sensors {
		compatible = "regulator-fixed";
		regulator-name = "vdd_sensor_hub";
		regulator-min-microvolt = <2800000>;
		regulator-max-microvolt = <2800000>;
		enable-active-high;
		regulator-boot-on;
		regulator-always-on;
		gpio = <&gpio TEGRA_GPIO(N, 0) GPIO_ACTIVE_HIGH>;
		vin-supply = <&vdd_5v0_sys>;
	};
};

&cpu0 {
	cpu-supply = <&vdd_cpu>;
	operating-points-v2 = <&cpu0_opp_table>;
};

&cpu1 {
	cpu-supply = <&vdd_cpu>;
	operating-points-v2 = <&cpu0_opp_table>;
};

&cpu2 {
	cpu-supply = <&vdd_cpu>;
	operating-points-v2 = <&cpu0_opp_table>;
};

&cpu3 {
	cpu-supply = <&vdd_cpu>;
	operating-points-v2 = <&cpu0_opp_table>;
};

&hda {
	status = "okay";
};

&hdmi {
	status = "okay";
	nvidia,ddc-i2c-bus = <&i2c4>;
	nvidia,hpd-gpio = <&gpio TEGRA_GPIO(N, 7) GPIO_ACTIVE_HIGH>;
};

/* MS HID - I2C1 */
&i2c1 {
	status = "okay";
	clock-frequency = <400000>;

	/* Sensor Collection at 0x28 */
	sensor@28 {
		compatible = "hid-over-i2c";
		reg = <0x28>;
		hid-descr-addr = <0x0001>;
		interrupt-parent = <&gpio>;
		interrupts = <TEGRA_GPIO(BB, 6) IRQ_TYPE_LEVEL_LOW>;
	};
	/* EDID at 0x50*/
};

/* Daughter board - I2C2 */
&i2c2 {
	status = "okay";
	clock-frequency = <400000>;

	/* Atmel Maxtouch, HID over I2C */
	touchscreen@5b {
		compatible = "hid-over-i2c";
		reg = <0x5b>;
		hid-descr-addr = <0x0000>;
		interrupt-parent = <&gpio>;
		interrupts = <TEGRA_GPIO(K, 2) IRQ_TYPE_LEVEL_LOW>;
	};
};

/* Cams - I2C3 */
&i2c3 {
	status = "okay";
	clock-frequency = <100000>;
	/* Cams at 0x10 and 0x72 */
};

/* HDMI DisplayDataChannel - I2C4 */
&i2c4 {
	status = "okay";
	clock-frequency = <100000>;
};

/* System bus - I2C5 */
&i2c5 {
	status = "okay";
	clock-frequency = <400000>;

	battery@a {
		compatible = "microsoft,surface-rt-ec";
		reg = <0x0a>;
		enable-gpios = <&gpio TEGRA_GPIO(N, 3) GPIO_ACTIVE_HIGH>;
		interrupt-parent = <&gpio>;
		interrupts = <TEGRA_GPIO(J, 0) IRQ_TYPE_EDGE_RISING>;
	};

	wm8962: audio-codec@1a {
		compatible = "wlf,wm8962";
		reg = <0x1a>;
		interrupt-parent = <&gpio>;
		interrupts = <TEGRA_GPIO(W, 3) IRQ_TYPE_LEVEL_HIGH>;

		AVDD-supply  = <&vdd_1v8_sys>;
		CPVDD-supply = <&vdd_1v8_sys>;
		DBVDD-supply = <&vdd_1v8_sys>;
		DCVDD-supply = <&vdd_1v8_sys>;
		MICVDD-supply = <&vdd_1v8_sys>;
		PLLVDD-supply = <&vdd_1v8_sys>;
		SPKVDD1-supply = <&vdd_1v8_sys>;
		SPKVDD2-supply = <&vdd_1v8_sys>;
	};

	pmic: pmic@2d {
		compatible = "ti,tps65911";
		reg = <0x2d>;

		interrupts = <GIC_SPI 86 IRQ_TYPE_LEVEL_HIGH>;
		#interrupt-cells = <2>;
		interrupt-controller;

		ti,system-power-controller;

		#gpio-cells = <2>;
		gpio-controller;

		regulators {
			vdd_cpu: vddctrl {
				regulator-name = "vdd_cpu,vdd_sys";
				regulator-min-microvolt = <800000>;
				regulator-max-microvolt = <1250000>;
				regulator-coupled-with = <&vdd_core>;
				regulator-coupled-max-spread = <300000>;
				regulator-max-step-microvolt = <100000>;
				regulator-always-on;
				ti,regulator-ext-sleep-control = <1>;

				nvidia,tegra-cpu-regulator;
			};

			ldo1_reg: ldo1 {
				regulator-name = "tCoverAndSensorCollection";
				regulator-min-microvolt = <1800000>;
				regulator-max-microvolt = <1800000>;
				regulator-always-on;
				regulator-boot-on;
			};

			ldo3_reg: ldo3 {
				regulator-name = "tCoverPower";
				regulator-min-microvolt = <2800000>;
				regulator-max-microvolt = <2800000>;
				regulator-always-on;
				regulator-boot-on;
			};

			ldo5_reg: ldo5 {
				regulator-name = "vddio_sdmmc";
				regulator-min-microvolt = <1800000>;
				regulator-max-microvolt = <3300000>;
				regulator-always-on;
			};
		};
	};

	nct1008: temperature-sensor@4c {
		compatible = "onnn,nct1008";
		reg = <0x4c>;
		interrupt-parent = <&gpio>;
		interrupts = <TEGRA_GPIO(DD, 5) IRQ_TYPE_EDGE_FALLING>;
		#thermal-sensor-cells = <1>;
	};

	vdd_core: core-regulator@60 {
		compatible = "ti,tps62361";
		reg = <0x60>;

		regulator-name = "tps62361-vout";
		regulator-min-microvolt = <500000>;
		regulator-max-microvolt = <1350000>;
		regulator-coupled-with = <&vdd_cpu>;
		regulator-coupled-max-spread = <300000>;
		regulator-max-step-microvolt = <100000>;
		regulator-boot-on;
		regulator-always-on;
		ti,enable-vout-discharge;
		ti,vsel0-state-high;
		ti,vsel1-state-high;

		nvidia,tegra-core-regulator;
	};
};

/* 2GB DDR3 Memory */
&memory {
	reg = <0x80000000 0x40000000>; // 1 GiB is wrong size but 2GB doesn't work atm
};

&pinmux {
	pinctrl-names = "default";
	pinctrl-0 = <&state_default>;

	state_default: pinmux {
		/* HDMI HOTPLUG_DETECT */
		hdmi-interrupt {
			nvidia,pins = "hdmi_int_pn7";
			nvidia,function = "hdmi";
			nvidia,pull = <TEGRA_PIN_PULL_NONE>;
			nvidia,tristate = <TEGRA_PIN_ENABLE>;
			nvidia,enable-input = <TEGRA_PIN_ENABLE>;
		};

		vol-keys {
			nvidia,pins = "kb_row14_ps6", //down
				      "kb_row15_ps7"; //up
			nvidia,pull = <TEGRA_PIN_PULL_NONE>;
			nvidia,tristate = <TEGRA_PIN_ENABLE>;
			nvidia,enable-input = <TEGRA_PIN_ENABLE>;
		};

		backlight-pwm {
			nvidia,pins = "gmi_ad8_ph0";
			nvidia,function = "pwm0";
			nvidia,pull = <TEGRA_PIN_PULL_NONE>;
			nvidia,tristate = <TEGRA_PIN_DISABLE>;
			nvidia,enable-input = <TEGRA_PIN_DISABLE>;
		};

		wifi-interrupt {
			nvidia,pins = "pu5";
			nvidia,pull = <TEGRA_PIN_PULL_DOWN>;
			nvidia,tristate = <TEGRA_PIN_DISABLE>;
			nvidia,enable-input = <TEGRA_PIN_ENABLE>;
		};

		sdmmc1-wp {
			nvidia,pins = "vi_d11_pt3";
			nvidia,pull = <TEGRA_PIN_PULL_NONE>;
			nvidia,tristate = <TEGRA_PIN_DISABLE>;
			nvidia,enable-input = <TEGRA_PIN_ENABLE>;
		};

		charger-interrupt {
			nvidia,pins = "gmi_cs0_n_pj0";
			nvidia,pull = <TEGRA_PIN_PULL_NONE>;
			nvidia,tristate = <TEGRA_PIN_ENABLE>;
			nvidia,enable-input = <TEGRA_PIN_ENABLE>;
		};
	};
};

&pwm {
	status = "okay";
};

&rgb {
	status = "okay";

	port@0 {
		lcd_output: endpoint {
			remote-endpoint = <&lvds_encoder_input>;
			bus-width = <24>;
		};
	};
};

/* SD CARD - SDMMC-1 */
&sdmmc1 {
	status = "okay";
	vqmmc-supply = <&ldo5_reg>;
	bus-width = <4>;
	power-gpios = <&gpio TEGRA_GPIO(D, 7) GPIO_ACTIVE_HIGH>;
	cd-gpios = <&gpio TEGRA_GPIO(I, 5) GPIO_ACTIVE_LOW>;
	wp-gpios = <&gpio TEGRA_GPIO(T, 3) GPIO_ACTIVE_HIGH>;
};

/* Wifi - SDMMC-3 */
&sdmmc3 {
	#address-cells = <1>;
	#size-cells = <0>;

	status = "okay";

	bus-width = <4>;
	cap-power-off-card;
	keep-power-in-suspend;
	max-frequency = <100000000>;

	assigned-clocks = <&tegra_car TEGRA30_CLK_SDMMC3>;
	assigned-clock-parents = <&tegra_car TEGRA30_CLK_PLL_C>;
	assigned-clock-rates = <100000000>;

	mmc-pwrseq = <&mrvl_wifi_pwrseq>;
	vqmmc-supply = <&vqmmc_wifi_reg>;

	/* Marvell 88W8797 WiFi */
	wifi@1 {
		compatible = "marvell,sd8897";
		reg = <1>;
		interrupt-parent = <&gpio>;
		interrupts = <TEGRA_GPIO(U, 5) IRQ_TYPE_LEVEL_HIGH>;
	};
};

/* internal 32/64GB eMMC - SDMMC-4 */
&sdmmc4 {
	status = "okay";
	bus-width = <8>;
	non-removable;
};

&spi4 {
	status = "okay";
	spi-max-frequency = <25000000>;

	/* Boot flash - OTP read only */
	flash@1 {
		compatible = "winbond,w25q32", "jedec,spi-nor";
		reg = <1>;
		spi-max-frequency = <20000000>;
	};
};

&tegra_i2s1 {
	status = "okay";
};

&tegra_pmc {
	status = "okay";
	nvidia,invert-interrupt;
	nvidia,suspend-mode = <1>;
	nvidia,cpu-pwr-good-time = <2000>;
	nvidia,cpu-pwr-off-time = <200>;
	nvidia,core-pwr-good-time = <3845 3845>;
	nvidia,core-pwr-off-time = <0>;
	nvidia,core-power-req-active-high;
	nvidia,sys-clock-req-active-high;

	core-supply = <&vdd_core>;

	i2c-thermtrip {
		nvidia,i2c-controller-id = <4>;
		nvidia,bus-addr = <0x2d>;
		nvidia,reg-addr = <0x3f>;
		nvidia,reg-data = <0x80>;
	};
};

&uarta {
	status = "okay";
};

&uartc {
	status = "okay";
	compatible = "nvidia,tegra30-hsuart";

	/* Bluetooth - Marvell 88W8797*/
};

&usb1 {
	status = "okay";
};

&usb1_phy {
	vbus-supply = <&usb1_vbus_reg>;
	status = "okay";
};
